from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2b8965d88fd3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Step 1: Add the token column as nullable initially
    with op.batch_alter_table('invites', schema=None) as batch_op:
        batch_op.add_column(sa.Column('token', sa.String(length=512), nullable=True))
    
    # Step 2: Populate existing rows with a default token value
    op.execute("UPDATE invites SET token = 'default_token' WHERE token IS NULL")
    
    # Step 3: Alter the column to be non-nullable
    with op.batch_alter_table('invites', schema=None) as batch_op:
        batch_op.alter_column('token', nullable=False)
    
    # Step 4: Add the unique constraint
    with op.batch_alter_table('invites', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['token'])


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('invites', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('token')
    # ### end Alembic commands ###
