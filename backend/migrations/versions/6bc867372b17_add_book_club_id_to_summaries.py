"""Add book_club_id to summaries

Revision ID: 6bc867372b17
Revises: 629333f548b1
Create Date: 2025-05-01 18:12:56.287999
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text


# revision identifiers, used by Alembic.
revision = '6bc867372b17'
down_revision = '629333f548b1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First ensure required tables exist
    conn = op.get_bind()
    
    # Add columns as nullable first
    with op.batch_alter_table('summaries', schema=None) as batch_op:
        batch_op.add_column(sa.Column('book_club_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('user_id', sa.Integer(), nullable=True))
    
    # Create a temporary admin user if none exists
    result = conn.execute(text("SELECT id FROM users LIMIT 1"))
    user = result.fetchone()
    
    if not user:
        # Create a default admin user
        conn.execute(text("""
            INSERT INTO users (username, email, password_hash, created_at)
            VALUES ('admin', 'admin@example.com', 'temp_password', NOW())
            RETURNING id
        """))
        result = conn.execute(text("SELECT id FROM users LIMIT 1"))
        user = result.fetchone()
    
    user_id = user[0]
    
    # Create a default book club if none exists
    result = conn.execute(text("SELECT id FROM book_clubs LIMIT 1"))
    club = result.fetchone()
    
    if not club:
        # Create a default book club owned by our admin user
        conn.execute(text(f"""
            INSERT INTO book_clubs (name, description, created_at, owner_id)
            VALUES ('Default Club', 'Auto-created club', NOW(), {user_id})
            RETURNING id
        """))
        result = conn.execute(text("SELECT id FROM book_clubs LIMIT 1"))
        club = result.fetchone()
    
    club_id = club[0]
    
    # Update existing summaries with valid IDs
    conn.execute(text(f"""
        UPDATE summaries 
        SET 
            user_id = {user_id},
            book_club_id = {club_id}
        WHERE 
            user_id IS NULL OR 
            book_club_id IS NULL
    """))
    
    # Now make the columns non-nullable
    with op.batch_alter_table('summaries', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_summaries_user', 'users', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('fk_summaries_club', 'book_clubs', ['book_club_id'], ['id'])
        batch_op.alter_column('user_id', nullable=False)
        batch_op.alter_column('book_club_id', nullable=False)
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('summaries', schema=None) as batch_op:
        batch_op.drop_constraint('fk_summaries_user', type_='foreignkey')
        batch_op.drop_constraint('fk_summaries_club', type_='foreignkey')
        batch_op.drop_column('user_id')
        batch_op.drop_column('book_club_id')
    # ### end Alembic commands ###
